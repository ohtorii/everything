/* 秀丸エディタからEverythingを使用するマクロ。

＊Todo
・<c-r>		(済)「通常の検索モード、正規表現」の切り替え
・<c-f>		(済)検索パス切り替え（通常、プロジェクトディレクトリ、カレントディレクトリ）
  <c-s-f>	(済)
・<c-d>		(済)フルパス検索モードとファイル名のみの検索モードを切り替え
・<c-p>		検索履歴を辿る
  <c-n> 
・<c-c>		(済)ESCキーが押されたことにする
・<f1>		ヘルプ表示（?キー）
・

＊やること
・検索ディレクトリをGUI右側に固定する
・(済)プロジェクトディレクトリを探す
・設定をiniに保存する
（検索履歴）
・検索履歴を辿る
・iniにsave/load

*連絡先
https://github.com/ohtorii/everything
http://d.hatena.ne.jp/ohtorii/
https://twitter.com/ohtorii
*/


/*****************************************************************************
	定義
*****************************************************************************/
//バージョン番号
$g_version 		= "version 2.0.0(2018/10/08)";


$dengaku_dll 	= hidemarudir + "\\DengakuDLL.dll";
#g_hmjre_dll 	= 0;
#g_open_newfile	= false;
#g_new_hidemaru	= 0;
#g_old_hidemaru	= 0;

//検索するファイルパス
$g_path_current=directory2;
execmacro currentmacrodirectory+"\\everything_internal\\search_project_folder.mac", filename2;
$g_path_project=getresultex(-1);

//空白文字の定義
$g_space="\r\n\t 　";

/*************************
	各種モード
*************************/
/*検索モード*/
#g_SEARCH_DEFAULT	=0;
#g_SEARCH_REGEX		=1;
#g_search_mode		=#g_SEARCH_DEFAULT;
/*フルパス名マッチするかどうか*/
#g_match_full_path	= true;

/*検索するファイルパスのモード*/
#g_PATH_MODE_NONE		= 0;
#g_PATH_MODE_CURRENT	= 1;
#g_PATH_MODE_PROJECT	= 2;
#g_path_mode			= #g_PATH_MODE_NONE;

/*************************
	iniファイルの設定
*************************/
$g_ini_config_filename = currentmacrofilename + ".config.ini";
$g_ini_histry_filename = currentmacrofilename + ".history.ini";


/*************************
	実行ファイルの設定
**************************/
/* es.exe へのパス */
$g_exe 						= "";
$g_argument_default			= "";
$g_argument_regex			= "";
$g_option_match_full_path	= "";

/*************************
ダイアログ関係
*************************/
//ダイアログに入力された検索パターン
$g_search_pattern="";



/*****************************************************************************
	メイン処理
*****************************************************************************/
$g_old_searchbuffer = searchbuffer;
#g_old_searchoption = searchoption;
#g_old_hidemaru     = hidemaruhandle(0);
if(true):
	call HistroyInsertTestData;
	call HistoryGetCurrent;
	$g_search_pattern=$return;
}

call Main;
setsearch $g_old_searchbuffer, #g_old_searchoption;
endmacro;


Main:
	call LoadIni;
	if(! ##return){
		return false;
	}

	call CheckEnvironment;
	if(! ##return){
		return false;
	}

	call NewfileIfExist;
	if(##return==false){
		return false;
	}

	loaddll $dengaku_dll;
	if (!result) {
		message "田楽DLLのロードに失敗しました\n"
		      + "DengakuDLL.dllが秀丸エディタのディレクトリに存在するか確認してください";
		return false;
	}
	#g_hmjre_dll=loaddll("HmJre.dll");
	if(#g_hmjre_dll==0){
		message "HmJre.dll のロードに失敗しました\n" +
				+ "HmJre.dllが秀丸エディタのディレクトリに存在するか確認してください";
		return false;
	}
	call Start;
	##result=##return;

	call WriteIni;

	freedll;
	freedll #g_hmjre_dll;
	#g_hmjre_dll = 0;

	clearupdated;
	if(! ##result){
		call CloseFileIfOpen;
	}
	return ##result;


LoadIni:
	$g_exe						= getinistr($g_ini_config_filename,"program","command"					);
	$g_argument_default 		= getinistr($g_ini_config_filename,"program","argument_default" 		);
	$g_argument_regex			= getinistr($g_ini_config_filename,"program","argument_regex"			);
	$g_option_match_full_path	= getinistr($g_ini_config_filename,"program","option_match_full_path"	);
	//$g_search_pattern			= getinistr($g_ini_config_filename,"history","input"					);
	return true;


WriteIni:
	writeinistr $g_ini_config_filename, "history", "input", $g_search_pattern;
	return ##return;


Start:
	/*
	return 	true	ユーザーは検索結果を受け入れた
			false	ユーザーは検索結果を拒否した、又は、処理失敗
	*/
	call CreateDialog;
	if(! ##return){
		return false;
	}

	debuginfo 1;

	//文字入力中に適度な間隔でファイル内容を更新する。
	##interval			= 300;
	##prev_tick 		= 0;
	$$prev_search_pattern="";
	while (1) {
		##current_tick = tickcount;
		if(##interval < (##current_tick - ##prev_tick)){
			$g_search_pattern = dllfuncstr("GETCTRLSTRING", "Everything@Param");

			call TrimString $g_search_pattern;
			$g_search_pattern=$$return;

			if($g_search_pattern != $$prev_search_pattern){
				call UpdateSearchWindow;
				$$prev_search_pattern=$g_search_pattern;
			}
			##prev_tick = ##current_tick;
		}

		$$item = dllfuncstr("WAITCTRLNOTIFY",60);
		if($$item=="0"){
			//キャンセル
			break;
		}else if($$item=="1"){
			//ok
			break;
		}
		
		##shift=iskeydown(0x10);
		##ctrl=iskeydown(0x11);
		if(##ctrl){		//ctrl
			if(iskeydown(0x43)){
				//<c-c>
				$$item="0";
				break;
			}else if(iskeydown(0x52)){
				//<c-r>
				call ToggleSearchMode;
				call UpdateDialogStatus;
				call UpdateSearchWindow;
			}else if(iskeydown(0x44)){
				//<c-d>
				call ToggleMatchFullPathMode;
				call UpdateDialogStatus;
				call UpdateSearchWindow;
			}else if(iskeydown(P)){
				//<c-p>
				call HistoryForward;
				##n=dllfuncstr("SETCTRLSTRING", "Everything@Param", $$return);
			}else if(iskeydown(N)){
				//<c-n>
				call HistoryBack;
				##n=dllfuncstr("SETCTRLSTRING", "Everything@Param", $$return);
			}else if(iskeydown(0x46)){
				if(##shift){
					//<c-s-f>
					call SwitchPathMode false;
				}else{
					//<c-f>
					call SwitchPathMode true;
				}
				call UpdateDialogStatus;
				call UpdateSearchWindow;
			}
		}/*else if(iskeydown(0x12)){		//alt
		}*/
	}
	##n = dllfunc("ENDDIALOG");

	if($$item=="0"){
		//ユーザーはファイル検索をキャンセルしたので検索ウインドウを開いていれば閉じる。
		return false;
	}else if ($$item == "1"){
		//ユーザーはファイル検索の結果を受け入れたので検索ウインドウをそのままにする。
		return true;
	}
	//念のためウインドウを開いたままにする
	return true;


ToggleMatchFullPathMode:
	if(#g_match_full_path){
		#g_match_full_path=false;
	}else{
		#g_match_full_path=true;
	}
	return;


ToggleSearchMode:
	if(#g_search_mode==#g_SEARCH_DEFAULT){
		#g_search_mode = #g_SEARCH_REGEX;
	}else{
		#g_search_mode = #g_SEARCH_DEFAULT;
	}
	return ;


SwitchPathMode:
	if(##1){
		//正順
		if(#g_path_mode == #g_PATH_MODE_NONE){
			#g_path_mode=#g_PATH_MODE_CURRENT;
		}else if(#g_path_mode == #g_PATH_MODE_CURRENT){
			#g_path_mode=#g_PATH_MODE_PROJECT;
		}else if(#g_path_mode == #g_PATH_MODE_PROJECT){
			#g_path_mode=#g_PATH_MODE_NONE;
		}
	}else{
		//逆順
		if(#g_path_mode == #g_PATH_MODE_NONE){
			#g_path_mode=#g_PATH_MODE_PROJECT;
		}else if(#g_path_mode == #g_PATH_MODE_CURRENT){
			#g_path_mode=#g_PATH_MODE_NONE;
		}else if(#g_path_mode == #g_PATH_MODE_PROJECT){
			#g_path_mode=#g_PATH_MODE_CURRENT;
		}
	}
	return;


NewfileIfExist:
	#g_open_newfile = false;
	if(filetype=="new"){
		return true;
	}
	//編集中のテキストを上書きしないための対応。
	//新規ファイルを作成しそこへEverythingの結果を出力する。
	newfile;
	if(result==0){
		return false;
	}
	#g_open_newfile=true;
	#g_new_hidemaru=hidemaruhandle(0);
	return true;


CloseFileIfOpen:
	if(#g_open_newfile){
		setactivehidemaru	#g_old_hidemaru;
		closehidemaruforced #g_new_hidemaru;

		#g_old_hidemaru=0;
		#g_new_hidemaru=0;
	}
	return true;


UpdateDialogStatus:
	if(#g_search_mode==#g_SEARCH_DEFAULT){
		$$mode="";
	}else{
		$$mode=" regex";
	}
	if(#g_match_full_path){
		$$path="path";
	}else{
		$$path="file";
	}
	##n=dllfunc("SETCTRLSTRING","Everything@Status", $$path + $$mode);
	
	call GetSearchPathModeString;
	$$search_path_mode=$$return;
	call GetSearchPath;
	$$search_path = $$return;
	if($$search_path==""){
		$$search_path="*";
	}
	##n=dllfunc("SETCTRLSTRING","Everything@SearchPath", "["+$$search_path_mode+"]" + $$search_path);
	return ;


CreateDialog:
	if (dllfunc("NEWDIALOG", "Everythingでファイルを検索するマクロ " + $g_version, 128) == 0 ||
		dllfunc("NEWCONTROL", "text", "Everything@Status", "") == 0 ||
		dllfunc("SETCTRLWIDTH", "", 10) == 0 ||
		dllfunc("NEWCONTROL", "text", "Everything@SearchPath", "") == 0 ||
		dllfunc("NEWCONTROL", "text", "", "検索(S)") == 0 ||
		dllfunc("SETCTRLWIDTH", "", 8) == 0 ||
		dllfunc("NEWCONTROL", "edit", "Everything@Param", $g_search_pattern) == 0 ||
		dllfunc("NEWCONTROL", "okcancel", "Everything@OkCancel", "") == 0)
	{
		message "ダイアログの作成に失敗しました\n";
		return false;
	}
	call UpdateDialogStatus;
	// ダイアログの表示
	##n = dllfunc("SHOWDIALOG", 0, 0);
	return true;


InputFromText:
	if(selecting){
		$$search_words = gettext2(seltopcolumn,seltoplineno,selendcolumn,selendlineno,1);
	}else{
		##old_x=x;
		##old_y=y;
		selectline;
		$$search_words = gettext2(seltopcolumn,seltoplineno,selendcolumn,selendlineno,0);
		moveto  ##old_x, ##old_y;
	}
	return $$search_words;


CheckEnvironment:
	if(! existfile($g_exe)){
		message "iniファイルで指定された実行ファイルが見つかりません。\n\n" +
				"【見つからない実行ファイル名】\n"	+
				$g_exe + "\n\n" 					+
				"【iniファイル名】\n"				+
				$g_ini_config_filename	+ "\n\n"	+
				"【対応方法】\n"					+
				"iniファイルに正しい実行ファイル名を設定して下さい。\n"
				;

		return false;
	}
	return true;


UpdateSearchWindow:
	if($g_search_pattern == ""){
		call ClearText;
	}else{
		call RunEverything  $g_search_pattern;
	}
	return;


ClearText:
	disabledraw;
	selectall;
	backspace;
	enabledraw;
	return;


GetSearchPath:
	if(#g_path_mode==#g_PATH_MODE_NONE){
		$$path_mode = "";
	}else if(#g_path_mode==#g_PATH_MODE_CURRENT){
		$$path_mode = $g_path_current;
	}else if(#g_path_mode==#g_PATH_MODE_PROJECT){
		$$path_mode = $g_path_project;
	}else{
		$$path_mode = "";
	}
	return $$path_mode;
	

GetSearchPathModeString:
	if(#g_path_mode==#g_PATH_MODE_NONE){
		return "default";
	}else if(#g_path_mode==#g_PATH_MODE_CURRENT){
		return "current";
	}else if(#g_path_mode==#g_PATH_MODE_PROJECT){
		return "project";
	}else{
		return "";
	}
	return "";


MakeEverythingArgument:
	$$search_words = $$1;

	if(#g_match_full_path){
		$$match_full_path = " "+$g_option_match_full_path;
	}else{
		$$match_full_path = "";
	}

	if(#g_search_mode==#g_SEARCH_DEFAULT){
		$$search_mode = " "+$g_argument_default;
	}else{
		$$search_mode = " "+$g_argument_regex;
	}
	
	call GetSearchPath;
	$$path_mode = $$return;
	
	if($$path_mode != ""){
		if(#g_search_mode==#g_SEARCH_REGEX){
			$$path_mode = quote($$path_mode);
		}else{
			//(memo)通常検索の場合。
			//パス名を検索語句とするために空白文字を追加する。
			$$path_mode = $$path_mode+" ";
		}
	}
	
	$$argument = $$match_full_path + $$search_mode;
	$$argument = sprintf($$argument, $$path_mode+$$search_words);
	return $$argument;


RunEverything:
	$$search_words = $$1;
	call MakeEverythingArgument $$search_words;
	$$argument = $$return;

	$$arg_exe 	= "\"" + $g_exe + "\"";
	$$run_str  = $$arg_exe + " " + $$argument;
	debuginfo $$run_str;
	if(true){
		call ClearText;
		runex $$run_str,
				0,						//sync	  0:async 1:sync
				0, "",					//stdin   0:none 1:auto 2:file 3:(reserve) 4:all 5:select
				5, "",		//stdout  0:none 1:auto 2:file 3:add file  4:new 5:insert 6:replace
				5, "",		//stderr  0:none 1:=out 2:file 3:add file  4:new 5:insert 6:replace
				1, "",					//folder  0:none 1:current 2:specify 3:(reserve) 4:exe's folder
				2,						//show	  0:auto 1:show 2:hide
				0,						//nodraw  0:draw 1:no draw
				0						//unicode 0:ansi 2:unicode
				;
		call HilightWrold $$search_words;
	}else{
		runex $$run_str,
				1,						//sync	  0:async 1:sync
				0, "",					//stdin   0:none 1:auto 2:file 3:(reserve) 4:all 5:select
				7, "",		//stdout  0:none 1:auto 2:file 3:add file  4:new 5:insert 6:replace
				7, "",		//stderr  0:none 1:=out 2:file 3:add file  4:new 5:insert 6:replace
				1, "",					//folder  0:none 1:current 2:specify 3:(reserve) 4:exe's folder
				2,						//show	  0:auto 1:show 2:hide
				0,						//nodraw  0:draw 1:no draw
				0						//unicode 0:ansi 2:unicode
				;
	}
	return result;


HilightWrold:
	$$search_words=$$1;
	if(#g_search_mode==#g_SEARCH_DEFAULT){
		call SearchWordsToRegex $$search_words;
		$$regex=$$return;
	}else{
		$$regex=$$search_words;
	}
	setsearch $$regex,0x00000800|0x00000010;
	hilightfound 1;
	return;


SearchWordsToRegex:
	/*空白区切りの文字列を正規表現に変換する。
	[in]	"hoge 123 .txt"
	[out]	"hoge|123|\.txt"
	*/
	$$word_list=$$1;
	$$escaped=quote($$word_list);
	$$regex = dllfuncstr(#g_hmjre_dll,"ReplaceRegular", "[" + $g_space + "]+", $$escaped, 0, "|", 2);
	return $$regex;

TrimString:
	while(1){
	  ##word=strlen($$1);
	  //文字列の先頭に空白文字がある場合、空白文字を削除
	  if(strstr($g_space,leftstr($$1,2))!=-1)$$1=rightstr($$1,##word-2);
	  else if(strstr($g_space,rightstr($$1,2))!=-1)$$1=leftstr($$1,##word-2);
	  //ここまで全角文字の対処
	  else if(strstr($g_space,leftstr($$1,1))!=-1)$$1=rightstr($$1,##word-1);
	  else if(strstr($g_space,rightstr($$1,1))!=-1)$$1=leftstr($$1,##word-1);
	  else break;
	}
	return $$1;


/*****************************************************************************
	検索ヒストリ
*****************************************************************************/
#g_MAX_HISTORY_NUM=8;
#g_history_top_index=0;		//先頭のインデックス
#g_history_end_index=0;		//最後のインデックス
#g_history_current_index=0; //現在のインデックス
$g_histroy[0]="";			//ヒストリのリングバッファ

/*
   ヒストリのテストデータを作成する
 */
HistroyInsertTestData:
$g_histroy[0]=".py";
$g_histroy[1]=".txt";
$g_histroy[2]="aeon .py";
$g_histroy[3]="develop .txt";
#g_history_top_index=0;
#g_history_end_index=4;
#g_history_current_index=0;
return;

/*ヒストリに文字列をセットする。
ヒストリを初期化する目的で利用する。
##1	index
$$2	設定する文字列
*/
HistorySet:
	$g_histroy[##1]=$$2;
	return;

/*ヒストリを取得する
ヒストリを保存する目的で利用する。
##1 index
*/
HistoryGet:
	call _HistoryClipIndex #g_history_current_index + ##1;
	return $g_histroy[##return];

/*現在のヒストリを取得する
*/
HistoryGetCurrent:
	return $g_histroy[#g_history_current_index];

/*ヒストリを一つ進める
返値　一つ進めた先のヒストリ*/
HistoryForward:
	call _HistoryClipIndex 1;
	call HistoryGetCurrent;
	return $$return;

	/*ヒストリを一つ戻す
返値一つ戻した先のヒストリ*/
HistoryBack:
	call _HistoryClipIndex -1;
	call HistoryGetCurrent;
	return $$return;

/*新規ヒストリを先頭に追加する
$$1 設定する文字列
*/
HistoryInsertTop:
	##top_index = #g_history_current_index - 1;
	call _HistoryClipIndex ##top_index;
	##top_index=##return;
	#g_histroy[##top_index] = $$1;
	#g_history_current_index=##top_index;
	return;

/*現在のヒストリを先頭に移動する。
ヒストリを確定したときに利用する。
*/
HistoryMoveCurrentToTop:
	$$current_history = $g_histroy[#g_history_current_index];
	$g_histroy[#g_history_current_index] = "";
	call HistoryInsertTop $$current_history;
	return;

/*同じヒストリを削除する
$$1 ヒストリの文字列
*/
_HistoryRemoveEqual:
	return;

/*ヒストリのインデックスを範囲内にする
##1 ヒストリのオフセット(1 or -1)
*/
_HistoryClipIndex:
	#g_history_current_index= #g_history_top_index + ##1;
	if(#g_history_current_index	< #g_MAX_HISTORY_NUM){
		return;
	}
	g_history_current_index = #g_history_current_index - #g_MAX_HISTORY_NUM;


