/* 秀丸エディタからEverythingを使用するマクロ。

＊操作方法
・<f1>          ヘルプ表示
・<c-r>         「通常の検索モード、正規表現」の切り替え
・<c-f>,<c-b>   検索パス切り替え（通常、プロジェクトディレクトリ、カレントディレクトリ）
・<c-d>         フルパス検索モードとファイル名のみの検索モードを切り替え
・<c-p>,<c-n>   検索履歴を辿る
・<esc>,<c-c>   キャンセルして終了
・<enter>       確定して終了

VIMのctrlp.vimと概ね同じです。

＊動作確認を行った環境
・秀丸エディタ ver 8.83 64bit
・でんがくDLL Ver.3.20

*連絡先
https://github.com/ohtorii/everything
http://d.hatena.ne.jp/ohtorii/
https://twitter.com/ohtorii

＊ライセンス
MIT License

Copyright (c) 2018 ohtorii

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


/*****************************************************************************
	定義
*****************************************************************************/
//バージョン番号
$g_version 		= "version 2.1.0";


#g_hmjre_dll 	= 0;
#g_open_newfile	= false;
#g_new_hidemaru	= 0;
#g_old_hidemaru	= 0;

//検索するファイルパス
$g_path_current=directory2;
execmacro currentmacrodirectory+"\\everything_internal\\search_project_folder.mac", filename2;
$g_path_project=getresultex(-1);

//空白文字の定義
$g_space="\r\n\t 　";

/*************************
	各種モード
*************************/
/*検索モード*/
#g_SEARCH_DEFAULT	=0;
#g_SEARCH_REGEX		=1;
#g_search_mode		=#g_SEARCH_DEFAULT;
/*フルパス名マッチするかどうか*/
#g_match_full_path	= true;

/*検索するファイルパスのモード*/
#g_PATH_MODE_NONE		= 0;
#g_PATH_MODE_CURRENT	= 1;
#g_PATH_MODE_PROJECT	= 2;
#g_PATH_MODE_NUM		= 3;
#g_path_mode			= #g_PATH_MODE_NONE;

/*************************
	iniファイルの設定
*************************/
$g_ini_config_filename = currentmacrofilename + ".config.ini";
$g_ini_histry_filename = currentmacrofilename + ".history.ini";


/*************************
	実行ファイルの設定
**************************/
/* es.exe へのパス */
$g_exe 						= "";
$g_argument_default			= "";
$g_argument_regex			= "";
$g_option_match_full_path	= "";

/*************************
ダイアログ関係
*************************/
//ダイアログに入力された検索パターン
$g_search_pattern="";
$g_NOTIFY_HELP="99";

/*************************
	検索ヒストリ
/*************************/
#g_MAX_HISTORY_NUM		=9;				//ヒストリの最大数
#g_history_num			=0;				//最後のインデックス
#g_history_current_index=0; 			//現在のインデックス
$g_histroy[0]			="";			//ヒストリのリングバッファ


/*************************
	キーの押下判定
*************************/
#g_IsKeyDown[0]=false;


/*****************************************************************************
	メイン処理
*****************************************************************************/
$g_old_searchbuffer = searchbuffer;
#g_old_searchoption = searchoption;
#g_old_hidemaru     = hidemaruhandle(0);

/*if(true){
	call Debug;
	endmacro;
}*/
disablebreak;
call Main;
setsearch $g_old_searchbuffer, #g_old_searchoption;
enablebreak;
endmacro;


Main:
	call LoadIni;
	if(! ##return){
		return false;
	}
	call SanitizeIni;

	call CheckEnvironment;
	if(! ##return){
		return false;
	}

	call NewfileIfExist;
	if(##return==false){
		return false;
	}

	call LoadDengakuDll;
	if (!##return) {
		return false;
	}
	call LoadHmJReDll;
	if (!##return) {
		return false;
	}

	call Start;
	##result=##return;

	freedll;
	freedll #g_hmjre_dll;
	#g_hmjre_dll = 0;

	clearupdated;
	if(! ##result){
		call CloseFileIfOpen;
	}

	call WriteIni;
	return ##result;

LoadDengakuDll:
	loaddll macrodir + "\\DengakuDLL.dll";
	if (result) {
		return true;
	}
	loaddll hidemarudir + "\\DengakuDLL.dll";
	if (result) {
		return true;
	}
	message "田楽DLLのロードに失敗しました\n" + "DengakuDLL.dllが秀丸マクロディレクトリに存在するか確認してください";
	return false;

LoadHmJReDll:
	#g_hmjre_dll=loaddll(macrodir + "\\HmJre.dll");
	if(#g_hmjre_dll){
		return true;
	}

	#g_hmjre_dll=loaddll(hidemarudir + "\\HmJre.dll");
	if(#g_hmjre_dll){
		return true;
	}
	message "HmJre.dll のロードに失敗しました\n" +
				+ "HmJre.dllが秀丸エディタのディレクトリに存在するか確認してください";
		return false;
	return false;

LoadIni:
	$g_exe						= getinistr($g_ini_config_filename,"program","command"					);
	$g_argument_default 		= getinistr($g_ini_config_filename,"program","argument_default" 		);
	$g_argument_regex			= getinistr($g_ini_config_filename,"program","argument_regex"			);
	$g_option_match_full_path	= getinistr($g_ini_config_filename,"program","option_match_full_path"	);
	#g_match_full_path	=getininum( $g_ini_histry_filename, "setting", "match_full_path");
	#g_search_mode		=getininum( $g_ini_histry_filename, "setting", "regex");
	#g_path_mode		=getininum( $g_ini_histry_filename, "setting", "search_path");
	return true;


SanitizeIni:
	//bool
	if(#g_match_full_path!=0){
		#g_match_full_path=1;
	}
	//bool
	if(#g_search_mode!=0){
		#g_search_mode=1;
	}
	if(#g_path_mode<0){
		#g_path_mode=0;
	}else if(#g_PATH_MODE_NUM <= #g_path_mode){
		#g_path_mode=0;
	}
	return;


WriteIni:
	writeininum $g_ini_histry_filename, "setting", "match_full_path", #g_match_full_path;
	writeininum $g_ini_histry_filename, "setting", "regex", #g_search_mode;
	writeininum $g_ini_histry_filename, "setting", "search_path", #g_path_mode;
	return ;

Start:
	/*
	return 	true	ユーザーは検索結果を受け入れた
			false	ユーザーは検索結果を拒否した、又は、処理失敗
	*/
	call HistoryLoad;
	call HistoryGetCurrent;
	$g_search_pattern=$return;

	call CreateDialog;
	if(! ##return){
		return false;
	}

	call HistoryGetCurrent;
	##n=dllfunc("SETCTRLSTRING", "Everything@Param", $$return);

	debuginfo 0;
	call MainLoop;
	$$item=$$return;
	
	##n = dllfunc("ENDDIALOG");

	if($$item=="0"){
		//ユーザーはファイル検索をキャンセルしたので検索ウインドウを開いていれば閉じる。
		return false;
	}else if ($$item == "1"){
		//ユーザーはファイル検索の結果を受け入れたので検索ウインドウをそのままにする。
		if($g_search_pattern!=""){
			call HistoryInsertTop $g_search_pattern;
			call HistorySave;
		}
		return true;
	}
	//念のためウインドウを開いたままにする
	return true;


MainLoop:
	//文字入力中に適度な間隔でファイル内容を更新する。
	##interval			= 300;
	##prev_tick 		= 0;
	$$prev_search_pattern="";
	while (1) {
		##current_tick = tickcount;
		if(##interval < (##current_tick - ##prev_tick)){
			$$input = dllfuncstr("GETCTRLSTRING", "Everything@Param");
			if(#g_search_mode==#g_SEARCH_DEFAULT){
				call TrimString $$input;
				$g_search_pattern=$$return;
			}else{
				//正規表現は空白も検索対象なので空白文字をtrimしない。
				$g_search_pattern=$$input;
			}

			if($g_search_pattern != $$prev_search_pattern){
				call UpdateSearchWindow;
				$$prev_search_pattern=$g_search_pattern;
			}
			##prev_tick = ##current_tick;
		}

		$$item = dllfuncstr("WAITCTRLNOTIFY",10);
		if($$item=="0"){
			//キャンセル
			break;
		}else if($$item=="1"){
			//ok
			break;
		}else if($$item==$g_NOTIFY_HELP){
			call ShowHelp;
			continue;
		}

		//##shift=iskeydown(0x10);
		##ctrl =iskeydown(0x11);
		if(##ctrl){		//ctrl
			//<c-c>
			call IskeyDown 0x43;
			if(##return){
				$$item="0";
				break;
			}

			//<c-r>
			call IskeyDown 0x52;
			if(##return){
				call ToggleSearchMode;
				call UpdateDialogStatus;
				call UpdateSearchWindow;
				continue;
			}
			
			//<c-s>
			call IskeyDown 0x53;
			if(##return){
				##n = dllfunc("SETFOCUSEDCTRL","Everything@Param");
				continue;
			}
			
			//<c-1> ~ <c-9>
			call MainLoop_Histroy;
			if(##return){
				continue;
			}
			
			//<c-d>
			call IskeyDown 0x44;
			if(##return){
				call ToggleMatchFullPathMode;
				call UpdateDialogStatus;
				call UpdateSearchWindow;
				continue;
			}

			//<c-f>
			call IskeyDown 0x46;
			if(##return){
				call SwitchPathMode true;
				call UpdateDialogStatus;
				call UpdateSearchWindow;
				continue;
			}
			//<c-b>
			call IskeyDown 0x42;
			if(##return){
				call SwitchPathMode false;
				call UpdateDialogStatus;
				call UpdateSearchWindow;
				continue;
			}

			//<c-p>
			call IskeyDown 0x50;
			if(##return){
				debuginfo "prev: "+str(#g_history_current_index);
				call HistoryBack;
				debuginfo "next: "+str(#g_history_current_index);
				##n=dllfunc("SETCTRLSTRING", "Everything@Param", $$return);
				call UpdateHistoryGui;
				continue;
			}

			//<c-n>
			call IskeyDown 0x4e;
			if(##return){
				call HistoryForward;
				##n=dllfunc("SETCTRLSTRING", "Everything@Param", $$return);
				call UpdateHistoryGui;
				continue;
			}
		}
		//<f1>
		call IskeyDown 0x70 ;
		if(##return){
			call ShowHelp;
			continue;
		}
	}
	return $$item;
	

MainLoop_Histroy:
	call CalcHistroyShortcutNum;
	##n=##return;
	
	##key_1=0x31;
	##histrory_index=0;
	while(##histrory_index<##n){
		call IskeyDown ##key_1+##histrory_index;
		if(##return){
			call HistorySetCurrentIndex ##histrory_index;
			call UpdateHistoryGui;
			call HistoryGetCurrent;
			##n=dllfunc("SETCTRLSTRING", "Everything@Param", $$return);
			return true;
		}
		##histrory_index = ##histrory_index + 1;
	}
	return false;


CalcHistroyShortcutNum:
	##n=9;//1-9
	if(#g_MAX_HISTORY_NUM < ##n){
		return #g_MAX_HISTORY_NUM;
	}
	return ##n;


ToggleMatchFullPathMode:
	if(#g_match_full_path){
		#g_match_full_path=false;
	}else{
		#g_match_full_path=true;
	}
	return;


ToggleSearchMode:
	if(#g_search_mode==#g_SEARCH_DEFAULT){
		#g_search_mode = #g_SEARCH_REGEX;
	}else{
		#g_search_mode = #g_SEARCH_DEFAULT;
	}
	return ;


SwitchPathMode:
	if(##1){
		//正順
		if(#g_path_mode == #g_PATH_MODE_NONE){
			#g_path_mode=#g_PATH_MODE_CURRENT;
		}else if(#g_path_mode == #g_PATH_MODE_CURRENT){
			#g_path_mode=#g_PATH_MODE_PROJECT;
		}else if(#g_path_mode == #g_PATH_MODE_PROJECT){
			#g_path_mode=#g_PATH_MODE_NONE;
		}
	}else{
		//逆順
		if(#g_path_mode == #g_PATH_MODE_NONE){
			#g_path_mode=#g_PATH_MODE_PROJECT;
		}else if(#g_path_mode == #g_PATH_MODE_CURRENT){
			#g_path_mode=#g_PATH_MODE_NONE;
		}else if(#g_path_mode == #g_PATH_MODE_PROJECT){
			#g_path_mode=#g_PATH_MODE_CURRENT;
		}
	}
	return;


NewfileIfExist:
	#g_open_newfile = false;
	if(filetype=="new"){
		return true;
	}
	//編集中のテキストを上書きしないための対応。
	//新規ファイルを作成しそこへEverythingの結果を出力する。
	newfile;
	if(result==0){
		return false;
	}
	#g_open_newfile=true;
	#g_new_hidemaru=hidemaruhandle(0);
	return true;


CloseFileIfOpen:
	if(#g_open_newfile){
		setactivehidemaru	#g_old_hidemaru;
		closehidemaruforced #g_new_hidemaru;

		#g_old_hidemaru=0;
		#g_new_hidemaru=0;
	}
	return true;


UpdateDialogStatus:
	if(#g_search_mode==#g_SEARCH_DEFAULT){
		$$regex="検索(R)        [通常]| 正規表現 ";
	}else{
		$$regex="検索(R)         通常 |[正規表現]";
	}
	if(#g_match_full_path){
		$$filter="絞り込み(D)    [フルパス名]| ファイル名 ";
	}else{
		$$filter="絞り込み(D)     フルパス名 |[ファイル名]";
	}

	##n=dllfunc("SETCTRLSTRING","Everything@regex", $$regex);
	##n=dllfunc("SETCTRLSTRING","Everything@filter", $$filter);

	if(#g_path_mode==#g_PATH_MODE_NONE){
		$$folder="フォルダ(F/B)  [通常]| カレント | プロジェクト  ";
	}else if(#g_path_mode==#g_PATH_MODE_CURRENT){
		$$folder="フォルダ(F/B)   通常 |[カレント]| プロジェクト  ";
	}else if(#g_path_mode==#g_PATH_MODE_PROJECT){
		$$folder="フォルダ(F/B)   通常 | カレント |[プロジェクト] ";
	}else{
		$$folder="フォルダ(F/B)  [通常]| カレント | プロジェクト  ";
	}

	call GetSearchPath;
	$$search_path = $$return;
	if($$search_path==""){
		$$search_path="*";
	}
	##n=dllfunc("SETCTRLSTRING","Everything@folder", $$folder + $$search_path);
	call UpdateHistoryGui;
	return ;

UpdateHistoryGui:
	call HistoryGetCurrentIndex;
	##current_index = ##return;
	
	##i=0;
	while(##i<#g_MAX_HISTORY_NUM){
		call HistoryGet ##i;
		if(##current_index==##i){
			$$pre ="[";
			$$post="]";
		}else{
			$$pre =" ";
			$$post=" ";
		}
		##n=dllfunc("SETCTRLSTRING", "Everything@history"+str(1+##i),sprintf("(&%d)%s%s%s",1+##i,$$pre,$$return,$$post));
		##i = ##i + 1;
	}
	return ;

CreateDialog:
	if (dllfunc("NEWDIALOG", "Everythingでファイルを検索するマクロ " + $g_version, 30, "0 0 center 'ＭＳ ゴシック'") == 0){
		message "ダイアログの作成に失敗しました\n";
		return false;
	}
	
	call CreateDialogHistrory;
	if(! ##return){
		message "ダイアログの作成に失敗しました\n";
		return false;
	}
	
	
	if(	dllfunc("NEWCOLUMN", 80) == 0 ||
		dllfunc("NEWCONTROL", "text", "Everything@folder",	"") == 0		||
		dllfunc("NEWCONTROL", "text", "Everything@regex",	"") == 0		||
		dllfunc("NEWCONTROL", "text", "Everything@filter",	"") == 0		||
		//dllfunc("NEWCONTROL", "text", "Everything@history", "") == 0		||

		//空行
		dllfunc("NEWCONTROL", "text", "", "") == 0							||
		//dllfunc("NEWCONTROL", "text", "", "") == 0							||

		dllfunc("NEWCONTROL", "text", "", "(&S)\t検索") == 0				||
		dllfunc("SETCTRLWIDTH", "", 8) == 0 								||
		dllfunc("NEWCONTROL", "edit", "Everything@Param", "") == 0			||

		//空行
		dllfunc("NEWCONTROL", "text", "", "") == 0							||
		dllfunc("NEWCONTROL", "text", "", "") == 0							||

		dllfunc("NEWCONTROL", "okcancel", "Everything@OkCancel", "") == 0	||
		
		//空行
		dllfunc("NEWCONTROL", "text", "", "") == 0							||
		
		dllfunc("NEWCONTROL", "button", "Everything@Help", "?") == 0		||
		dllfunc("SETCTRLWIDTH", "", 8) == 0 								||
		dllfunc("SETCTRLNOTIFY","",$g_NOTIFY_HELP) == 0
	){
		message "ダイアログの作成に失敗しました\n";
		return false;
	}
	call UpdateDialogStatus;
	// ダイアログの表示
	##n = dllfunc("SHOWDIALOG", hidemaruhandle(0), 0);
	return true;

CreateDialogHistrory:
	/*検索履歴のコントロールを作成する
	*/
	if(	dllfunc("NEWCONTROL", "text", "","履歴(N/P)") == 0					||
		dllfunc("NEWCONTROL", "text", "","==============================")==0
	){
		return false;
	}
	call CalcHistroyShortcutNum;
	##n=##return;
	##i=0;
	while(##i<##n){
		if(dllfunc("NEWCONTROL", "text", "Everything@history"+str(1+##i),"") == 0){
			return false;
		}
		##i = ##i + 1;
	}
	return true;
	
InputFromText:
	if(selecting){
		$$search_words = gettext2(seltopcolumn,seltoplineno,selendcolumn,selendlineno,1);
	}else{
		##old_x=x;
		##old_y=y;
		selectline;
		$$search_words = gettext2(seltopcolumn,seltoplineno,selendcolumn,selendlineno,0);
		moveto  ##old_x, ##old_y;
	}
	return $$search_words;


CheckEnvironment:
	if(! existfile($g_exe)){
		message "iniファイルで指定された実行ファイルが見つかりません。\n\n" +
				"【見つからない実行ファイル名】\n"	+
				$g_exe + "\n\n" 					+
				"【iniファイル名】\n"				+
				$g_ini_config_filename	+ "\n\n"	+
				"【対応方法】\n"					+
				"iniファイルに正しい実行ファイル名を設定して下さい。\n"
				;

		return false;
	}
	return true;


UpdateSearchWindow:
	if($g_search_pattern == ""){
		call ClearText;
	}else{
		call RunEverything  $g_search_pattern;
	}
	return;


ClearText:
	disabledraw;
	selectall;
	backspace;
	enabledraw;
	return;


GetSearchPath:
	if(#g_path_mode==#g_PATH_MODE_NONE){
		$$path_mode = "";
	}else if(#g_path_mode==#g_PATH_MODE_CURRENT){
		$$path_mode = $g_path_current;
	}else if(#g_path_mode==#g_PATH_MODE_PROJECT){
		$$path_mode = $g_path_project;
	}else{
		$$path_mode = "";
	}
	return $$path_mode;


GetSearchPathModeString:
	if(#g_path_mode==#g_PATH_MODE_NONE){
		return "default";
	}else if(#g_path_mode==#g_PATH_MODE_CURRENT){
		return "current";
	}else if(#g_path_mode==#g_PATH_MODE_PROJECT){
		return "project";
	}else{
		return "";
	}
	return "";


MakeEverythingArgument:
	$$search_words = $$1;

	if(#g_match_full_path){
		$$match_full_path = " "+$g_option_match_full_path;
	}else{
		$$match_full_path = "";
	}

	if(#g_search_mode==#g_SEARCH_DEFAULT){
		$$search_mode = " "+$g_argument_default;
	}else{
		$$search_mode = " "+$g_argument_regex;
	}

	call GetSearchPath;
	$$path_mode = $$return;

	if($$path_mode != ""){
		if(#g_search_mode==#g_SEARCH_REGEX){
			$$path_mode = quote($$path_mode);
		}else{
			//(memo)通常検索の場合。
			//パス名を検索語句とするために空白文字を追加する。
			$$path_mode = $$path_mode+" ";
		}
	}

	$$argument = $$match_full_path + $$search_mode;
	$$argument = sprintf($$argument, $$path_mode+$$search_words);
	return $$argument;


RunEverything:
	$$search_words = $$1;
	call MakeEverythingArgument $$search_words;
	$$argument = $$return;

	$$arg_exe 	= "\"" + $g_exe + "\"";
	$$run_str  = $$arg_exe + " " + $$argument;
	debuginfo $$run_str;
	if(true){
		call ClearText;
		runex $$run_str,
				0,						//sync	  0:async 1:sync
				0, "",					//stdin   0:none 1:auto 2:file 3:(reserve) 4:all 5:select
				5, "",		//stdout  0:none 1:auto 2:file 3:add file  4:new 5:insert 6:replace
				5, "",		//stderr  0:none 1:=out 2:file 3:add file  4:new 5:insert 6:replace
				1, "",					//folder  0:none 1:current 2:specify 3:(reserve) 4:exe's folder
				2,						//show	  0:auto 1:show 2:hide
				0,						//nodraw  0:draw 1:no draw
				0						//unicode 0:ansi 2:unicode
				;
		call HilightWorld $$search_words;
	}else{
		runex $$run_str,
				1,						//sync	  0:async 1:sync
				0, "",					//stdin   0:none 1:auto 2:file 3:(reserve) 4:all 5:select
				7, "",		//stdout  0:none 1:auto 2:file 3:add file  4:new 5:insert 6:replace
				7, "",		//stderr  0:none 1:=out 2:file 3:add file  4:new 5:insert 6:replace
				1, "",					//folder  0:none 1:current 2:specify 3:(reserve) 4:exe's folder
				2,						//show	  0:auto 1:show 2:hide
				0,						//nodraw  0:draw 1:no draw
				0						//unicode 0:ansi 2:unicode
				;
	}
	return result;


HilightWorld:
	$$search_words=$$1;
	if(#g_search_mode==#g_SEARCH_DEFAULT){
		call SearchWordsToRegex $$search_words;
		$$regex=$$return;
	}else{
		$$regex=$$search_words;
	}
	setsearch $$regex,0x00000800|0x00000010;
	hilightfound 1;
	return;


SearchWordsToRegex:
	/*空白区切りの文字列を正規表現に変換する。
	[in]	"hoge 123 .txt"
	[out]	"hoge|123|\.txt"
	*/
	$$word_list=$$1;
	$$escaped=quote($$word_list);
	$$regex = dllfuncstr(#g_hmjre_dll,"ReplaceRegular", "[" + $g_space + "]+", $$escaped, 0, "|", 2);
	return $$regex;

TrimString:
	while(1){
	  ##word=strlen($$1);
	  //文字列の先頭に空白文字がある場合、空白文字を削除
	  if(strstr($g_space,leftstr($$1,2))!=-1)$$1=rightstr($$1,##word-2);
	  else if(strstr($g_space,rightstr($$1,2))!=-1)$$1=leftstr($$1,##word-2);
	  //ここまで全角文字の対処
	  else if(strstr($g_space,leftstr($$1,1))!=-1)$$1=rightstr($$1,##word-1);
	  else if(strstr($g_space,rightstr($$1,1))!=-1)$$1=leftstr($$1,##word-1);
	  else break;
	}
	return $$1;

ShowHelp:
	message
	"<F1>                 ヘルプ表示\n"+
	"<Ctrl-r>             正規表現の切り替え（トグル）\n"+
	"<Ctrl-f>,<Ctrl-b>    検索パス切り替え\n"+
	"<Ctrl-d>             フルパス・ファイル名検索の切り替え（トグル）\n"+
	"<Ctrl-n>,<Ctrl-p>    検索履歴を進める/戻す\n"+
	"<Enter>              確定\n"+
	"<ESC>,<Ctrl-c>       終了\n"
	, "ヘルプ"
	, 0x20;

	return;


/*****************************************************************************
	キーの押下判定
*****************************************************************************/
IskeyDown:
	if(iskeydown(##1)){
		if(!#g_IsKeyDown[##1]){
			//キーが押された瞬間
			#g_IsKeyDown[##1]=true;
			return true;
		}
		//キーを押している
	}else{
		//キーを離している
		#g_IsKeyDown[##1]=false;
	}
	return false;



/*****************************************************************************
	検索ヒストリ
*****************************************************************************/
/*メモ
手抜き実装なので計算量はO(N^2)です。
なので、ヒストリの最大数(#g_MAX_HISTORY_NUM)を大きくすると処理負荷が高くなります。
*/

/****************************
	デバッグ用のルーチン
*****************************/
Debug:
	//call HistroyInsertTestData;

	//#g_history_current_index=3;
	//call HistoryInsertTop ".py";

	//call HistoryInsertTop "hoge";
	//#g_history_current_index=3;

	call HistoryLoad;
	debuginfo "==== Loaded ====";
	call HistoryDump;
	call HistoryInsertTop ".txt1";
	call HistoryInsertTop ".txt2";
	call HistoryInsertTop ".txt3";
	debuginfo "==== Inserted ====";
	call HistoryDump;
	call HistorySave;

	endmacro;
	return;


/*
   ヒストリのテストデータを作成する
 */
HistroyInsertTestData:
	$g_histroy[0]=".py";
	$g_histroy[1]=".txt";
	$g_histroy[2]="aeon .py";
	$g_histroy[3]="develop .txt";
	#g_history_num=4;
	#g_history_current_index=0;
	return;


HistoryDump:
	debuginfo "==== Histrory ====";
	##i=0;
	while(##i<#g_history_num){
		debuginfo sprintf("[%d]%s", ##i, $g_histroy[##i]);
		##i = ##i + 1;
	}
	debuginfo("#g_history_num     = " + str(#g_history_num));
	debuginfo("#g_history_current_index = " + str(#g_history_current_index));
	return;


HistorySave:
	##i=0;
	while(##i<#g_history_num){
		$$key="_"+str(##i);
		writeinistr $g_ini_histry_filename,"history",$$key,$g_histroy[##i];
		##i = ##i + 1;
	}
	return;


HistoryLoad:
	#g_history_current_index=0;
	##i=0;
	##max_loop=100;
	while(##i < ##max_loop){
		$$key="_"+str(##i);
		$$item=getinistr($g_ini_histry_filename,"history",$$key);
		if($$item==""){
			//iniファイルにこれ以上アイテムが無い
			#g_history_num=##i;
			return;
		}
		if(#g_MAX_HISTORY_NUM<=##i){
			#g_history_num=#g_MAX_HISTORY_NUM;
			return;
		}
		$g_histroy[##i]=$$item;
		##i = ##i + 1;
	}
	return;

/*ヒストリに文字列をセットする。
ヒストリを初期化する目的で利用する。
##1	index
$$2	設定する文字列
*/
HistorySet:
	$g_histroy[##1]=$$2;
	return;

/*現在のヒストリを取得する
*/
HistoryGetCurrent:
	return $g_histroy[#g_history_current_index];

/*ヒストリを取得する
##1 index
*/
HistoryGet:
	return $g_histroy[##1];

/*現在のヒストリインデックスを取得する
*/
HistoryGetCurrentIndex:
	return #g_history_current_index;
	
/*現在のヒストリインデックスを設定する
*/
HistorySetCurrentIndex:
	call _HistoryClipIndex ##1;
	#g_history_current_index=##return;
	return ;


/*ヒストリを一つ進める
返値 一つ進めた先のヒストリ文字列*/
HistoryForward:
	call _HistoryClipIndex #g_history_current_index + 1;
	#g_history_current_index=##return;
	call HistoryGetCurrent;
	return $$return;

/*ヒストリを一つ戻す
返値  一つ戻した先のヒストリ文字列*/
HistoryBack:
	call _HistoryClipIndex #g_history_current_index - 1;
	#g_history_current_index=##return;
	call HistoryGetCurrent;
	return $$return;

/*新規ヒストリを先頭に追加する
$$1 新規ヒストリの文字列
*/
HistoryInsertTop:
	##have_equal_item=true;
	while(##have_equal_item){
		call _HistoryRemoveEqual $$1;
		##have_equal_item=##return;
	}
	//配列先頭を空けるために後ろに１つずらす。
	##i=#g_history_num;
	while(0 < ##i){
		$g_histroy[##i]=$g_histroy[##i-1];
		##i = ##i - 1;
	}
	#g_history_num = #g_history_num + 1;
	if(#g_MAX_HISTORY_NUM < #g_history_num){
		#g_history_num=#g_MAX_HISTORY_NUM;
	}
	$g_histroy[0]=$$1;
	return;


/*同じヒストリを削除する
$$1 ヒストリの文字列
return 	false	重複無し
		true	重複あり
*/
_HistoryRemoveEqual:
	##equal_item_index=-1;
	##i = 0;
	while(##i < #g_history_num){
		if($g_histroy[##i]==$$1){
			##equal_item_index=##i;
			break;
		}
		##i = ##i + 1;
	}
	if(##equal_item_index == -1){
		return false;
	}

	//重複ヒストリの後ろから一つ前に詰める
	while(##i < #g_history_num){
		$g_histroy[##i]=$g_histroy[##i+1];
		##i = ##i + 1;
	}

	//ヒストリ数の調整
	#g_history_num = #g_history_num - 1;

	//
	//#g_history_current_index の調整
	//
	if(##equal_item_index < #g_history_current_index){
		//重複ヒストリ以降なので調整
		#g_history_current_index = #g_history_current_index - 1;
	}
	if(#g_history_num <= #g_history_current_index){
		//#g_history_current_indexはヒストリ配列の最後を指しているので更に調整。
		#g_history_current_index = #g_history_num-1;
	}
	return true;

/*ヒストリのインデックスを配列の範囲内にクリップする
*/
_HistoryClipIndex:
	debuginfo "_HistoryClipIndex:"+str(##1);
	if(##1 < 0){
		return #g_history_num - 1;
	}
	if(##1 < #g_history_num){
		return ##1;
	}
	return ##1 - #g_history_num;

